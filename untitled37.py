# -*- coding: utf-8 -*-
"""Untitled37.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TU3y-2AnPgDZalFBz7sOaO7ROTG23e6N
"""

from google.colab import files
a=files.upload()

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import keras
from keras.models import Sequential
from keras.layers import Dense,Activation,Dropout
from keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import GridSearchCV
from keras.activations import sigmoid,relu
import numpy as np
from sklearn import metrics

data=pd.read_csv('bank.csv')
data.head()

x=data.iloc[:,3:13]
y=data.iloc[:,13]

geo=pd.get_dummies(x['Geography'],drop_first=True)
gen=pd.get_dummies(x['Gender'],drop_first=True)

x=pd.concat([x,geo,gen],axis=1)

x=x.drop(['Geography','Gender'],axis=1)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)

scaler=StandardScaler()
x_train=scaler.fit_transform(x_train)
x_test=scaler.fit_transform(x_test)

def hyper_param_train(layers,activation):
  model=Sequential()
  for i,nodes in enumerate(layers):
    if i==0:
      model.add(Dense(nodes,input_dim=x_train.shape[1]))
      model.add(Activation(activation))
      model.add(Dropout(0.3))
    else:
      model.add(Dense(nodes))
      model.add(Activation(activation))
      model.add(Dropout(0.3))
  model.add(Dense(units=1,kernel_initializer='glorot_uniform',activation=sigmoid))
  model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
  return model

classifier=KerasClassifier(build_fn=hyper_param_train)

layers=[(20,),(40,30,10),(40,20)]

activation=['sigmoid','relu']

param_grid = dict(layers=layers, activation=activation, batch_size = [128, 256], epochs=[30])

grid=GridSearchCV(classifier,param_grid,cv=5)

result=grid.fit(x_train,y_train)

print(grid.best_score_)

print(grid.best_params_)

y_pred=(grid.predict(x_test))

val=metrics.accuracy_score(y_test,y_pred)
print("accuracy is =",str(val*100)+" %")





